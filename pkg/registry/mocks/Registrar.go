// Code generated by mockery v1.0.0
package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import registry "github.com/liszt-code/liszt/pkg/registry"

// Registrar is an autogenerated mock type for the Registrar type
type Registrar struct {
	mock.Mock
}

// DeregisterBuilding provides a mock function with given fields: ctx, buildingID
func (_m *Registrar) DeregisterBuilding(ctx context.Context, buildingID string) error {
	ret := _m.Called(ctx, buildingID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, buildingID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeregisterResident provides a mock function with given fields: ctx, residentID
func (_m *Registrar) DeregisterResident(ctx context.Context, residentID string) error {
	ret := _m.Called(ctx, residentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, residentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeregisterUnit provides a mock function with given fields: ctx, unitID
func (_m *Registrar) DeregisterUnit(ctx context.Context, unitID string) error {
	ret := _m.Called(ctx, unitID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, unitID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBuildingByID provides a mock function with given fields: ctx, buildingID
func (_m *Registrar) GetBuildingByID(ctx context.Context, buildingID string) (*registry.Building, error) {
	ret := _m.Called(ctx, buildingID)

	var r0 *registry.Building
	if rf, ok := ret.Get(0).(func(context.Context, string) *registry.Building); ok {
		r0 = rf(ctx, buildingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, buildingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResidentByID provides a mock function with given fields: ctx, residentID
func (_m *Registrar) GetResidentByID(ctx context.Context, residentID string) (*registry.Resident, error) {
	ret := _m.Called(ctx, residentID)

	var r0 *registry.Resident
	if rf, ok := ret.Get(0).(func(context.Context, string) *registry.Resident); ok {
		r0 = rf(ctx, residentID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Resident)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, residentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBuildingUnits provides a mock function with given fields: ctx, buildingID
func (_m *Registrar) ListBuildingUnits(ctx context.Context, buildingID string) ([]*registry.Unit, error) {
	ret := _m.Called(ctx, buildingID)

	var r0 []*registry.Unit
	if rf, ok := ret.Get(0).(func(context.Context, string) []*registry.Unit); ok {
		r0 = rf(ctx, buildingID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*registry.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, buildingID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUnitResidents provides a mock function with given fields: ctx, unitID
func (_m *Registrar) ListUnitResidents(ctx context.Context, unitID string) ([]*registry.Resident, error) {
	ret := _m.Called(ctx, unitID)

	var r0 []*registry.Resident
	if rf, ok := ret.Get(0).(func(context.Context, string) []*registry.Resident); ok {
		r0 = rf(ctx, unitID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*registry.Resident)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, unitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveResidentIn provides a mock function with given fields: ctx, residentID, newUnitID
func (_m *Registrar) MoveResidentIn(ctx context.Context, residentID string, newUnitID string) error {
	ret := _m.Called(ctx, residentID, newUnitID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, residentID, newUnitID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MoveResidentOut provides a mock function with given fields: ctx, residentID, unitID
func (_m *Registrar) MoveResidentOut(ctx context.Context, residentID string, unitID string) error {
	ret := _m.Called(ctx, residentID, unitID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, residentID, unitID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterBuilding provides a mock function with given fields: ctx, in
func (_m *Registrar) RegisterBuilding(ctx context.Context, in *registry.Building) (*registry.Building, error) {
	ret := _m.Called(ctx, in)

	var r0 *registry.Building
	if rf, ok := ret.Get(0).(func(context.Context, *registry.Building) *registry.Building); ok {
		r0 = rf(ctx, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Building)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registry.Building) error); ok {
		r1 = rf(ctx, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterResident provides a mock function with given fields: ctx, resident
func (_m *Registrar) RegisterResident(ctx context.Context, resident *registry.Resident) (*registry.Resident, error) {
	ret := _m.Called(ctx, resident)

	var r0 *registry.Resident
	if rf, ok := ret.Get(0).(func(context.Context, *registry.Resident) *registry.Resident); ok {
		r0 = rf(ctx, resident)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Resident)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *registry.Resident) error); ok {
		r1 = rf(ctx, resident)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUnit provides a mock function with given fields: ctx, buildingID, in
func (_m *Registrar) RegisterUnit(ctx context.Context, buildingID string, in *registry.Unit) (*registry.Unit, error) {
	ret := _m.Called(ctx, buildingID, in)

	var r0 *registry.Unit
	if rf, ok := ret.Get(0).(func(context.Context, string, *registry.Unit) *registry.Unit); ok {
		r0 = rf(ctx, buildingID, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *registry.Unit) error); ok {
		r1 = rf(ctx, buildingID, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
