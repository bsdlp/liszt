package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import registry "github.com/liszt-code/liszt/pkg/registry"

// Registrar is an autogenerated mock type for the Registrar type
type Registrar struct {
	mock.Mock
}

// DeregisterResident provides a mock function with given fields: ctx, residentID
func (_m *Registrar) DeregisterResident(ctx context.Context, residentID int64) error {
	ret := _m.Called(ctx, residentID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, residentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUnitByName provides a mock function with given fields: ctx, name
func (_m *Registrar) GetUnitByName(ctx context.Context, name string) (*registry.Unit, error) {
	ret := _m.Called(ctx, name)

	var r0 *registry.Unit
	if rf, ok := ret.Get(0).(func(context.Context, string) *registry.Unit); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*registry.Unit)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUnitResidents provides a mock function with given fields: ctx, unitID
func (_m *Registrar) ListUnitResidents(ctx context.Context, unitID int64) ([]*registry.Resident, error) {
	ret := _m.Called(ctx, unitID)

	var r0 []*registry.Resident
	if rf, ok := ret.Get(0).(func(context.Context, int64) []*registry.Resident); ok {
		r0 = rf(ctx, unitID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*registry.Resident)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, unitID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveResident provides a mock function with given fields: ctx, residentID, newUnitID
func (_m *Registrar) MoveResident(ctx context.Context, residentID int64, newUnitID int64) error {
	ret := _m.Called(ctx, residentID, newUnitID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, residentID, newUnitID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterResident provides a mock function with given fields: ctx, resident
func (_m *Registrar) RegisterResident(ctx context.Context, resident *registry.Resident) error {
	ret := _m.Called(ctx, resident)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *registry.Resident) error); ok {
		r0 = rf(ctx, resident)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
