// Code generated by go-bindata.
// sources:
// assets/schema/building.gql
// assets/schema/resident.gql
// assets/schema/root.gql
// assets/schema/unit.gql
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _assetsSchemaBuildingGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x70\x2a\xcd\xcc\x49\xc9\xcc\x4b\x57\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\x74\x51\x04\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\x21\x22\x89\x29\x29\x45\xa9\xc5\xc5\xa8\x82\xa5\x79\x99\x25\xc5\x56\x0a\xd1\xa1\x79\x99\x25\xb1\x8a\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\xe7\x81\x86\xea\x58\x00\x00\x00")

func assetsSchemaBuildingGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaBuildingGql,
		"assets/schema/building.gql",
	)
}

func assetsSchemaBuildingGql() (*asset, error) {
	bytes, err := assetsSchemaBuildingGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/building.gql", size: 88, mode: os.FileMode(420), modTime: time.Unix(1498200476, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaResidentGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\xa9\x2c\x48\x55\x08\x4a\x2d\xce\x4c\x49\xcd\x2b\x51\xa8\xe6\x52\x50\x50\x50\xc8\x4c\xb1\x52\xf0\x74\x51\x04\xb3\xf3\x12\x73\x53\xad\x14\x82\x4b\x8a\x32\xf3\xd2\x21\x22\xa5\x79\x99\x25\xc5\x56\x0a\xd1\xa1\x79\x99\x25\xb1\x8a\x5c\xb5\x5c\x5c\x99\x79\x05\xa5\x25\x0a\xa1\x05\x29\x89\x25\xa9\x30\xa3\x3c\xc1\x62\xf8\xcd\xe3\xaa\xe5\x02\x04\x00\x00\xff\xff\x2a\x26\x70\xad\x7f\x00\x00\x00")

func assetsSchemaResidentGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaResidentGql,
		"assets/schema/resident.gql",
	)
}

func assetsSchemaResidentGql() (*asset, error) {
	bytes, err := assetsSchemaResidentGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/resident.gql", size: 127, mode: os.FileMode(420), modTime: time.Unix(1498201573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaRootGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\xb1\xae\x02\x21\x10\x45\x7b\xbe\x62\xb6\xdb\xf7\x0b\x53\xbe\xd8\x6c\x61\xa1\xc6\xca\x6c\x41\x64\xb2\x92\x08\x22\x0c\xc5\xc6\xf8\xef\x66\x77\x19\x22\xb1\xe2\xe4\x5e\xee\xe4\xa4\xeb\x8d\x9c\x86\x97\x02\x00\x78\x66\x8a\x33\xc2\x61\x79\xd6\xc0\x65\xd6\x6c\x1f\x1e\x61\x5f\x48\xbd\x95\xe2\x39\xd0\xf6\xa9\xec\xfe\xb3\xbd\x1b\xeb\xa7\x84\x70\x11\x1e\x9b\xa6\x17\x18\x76\x08\x27\x8e\xd6\x4f\xdd\x1f\xd6\xba\x5b\x3f\x1f\x29\x59\x43\x9e\x97\x33\xc2\x63\xd3\xf4\x02\xed\x19\x49\xbb\x6a\x27\xba\x45\x30\x07\xa3\x99\xaa\x4c\xd0\x51\xbb\x84\x70\x6e\xe2\xc1\x87\xcc\xbf\x56\xdb\xb6\x1a\xb4\xdb\xea\x23\xdb\x6f\x95\x4f\x00\x00\x00\xff\xff\x44\xd6\xd4\xf7\x5c\x01\x00\x00")

func assetsSchemaRootGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaRootGql,
		"assets/schema/root.gql",
	)
}

func assetsSchemaRootGql() (*asset, error) {
	bytes, err := assetsSchemaRootGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/root.gql", size: 348, mode: os.FileMode(420), modTime: time.Unix(1498201938, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsSchemaUnitGql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\xce\xbd\x0a\xc2\x50\x0c\xc5\xf1\x3d\x4f\x71\xfa\x1a\x77\x14\x97\xae\x4a\x27\xe9\x50\x49\x28\x07\x34\x5c\xda\xdc\x41\xa4\xef\x2e\xa6\x75\x75\xfb\xf3\x83\x7c\xc4\xab\x1a\x06\x67\xe0\x2d\x00\x40\x2d\xe8\xcf\x5d\xb6\x4f\x4f\x2b\xb8\xc6\x42\x9f\x77\xb9\x37\x3e\x94\x3e\x17\x9c\x8e\xda\x7d\xb1\x95\x6a\x1e\x6b\xc1\xed\x72\xf4\xd8\xc9\x26\x42\xaf\x2d\x30\x54\x9d\xc2\x7e\x33\x7d\xda\xff\x7b\x09\xcd\x99\x2b\xbf\xff\x8d\xb2\xc9\x27\x00\x00\xff\xff\x79\xd6\x4a\xcf\xad\x00\x00\x00")

func assetsSchemaUnitGqlBytes() ([]byte, error) {
	return bindataRead(
		_assetsSchemaUnitGql,
		"assets/schema/unit.gql",
	)
}

func assetsSchemaUnitGql() (*asset, error) {
	bytes, err := assetsSchemaUnitGqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "assets/schema/unit.gql", size: 173, mode: os.FileMode(420), modTime: time.Unix(1498201573, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"assets/schema/building.gql": assetsSchemaBuildingGql,
	"assets/schema/resident.gql": assetsSchemaResidentGql,
	"assets/schema/root.gql": assetsSchemaRootGql,
	"assets/schema/unit.gql": assetsSchemaUnitGql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"assets": &bintree{nil, map[string]*bintree{
		"schema": &bintree{nil, map[string]*bintree{
			"building.gql": &bintree{assetsSchemaBuildingGql, map[string]*bintree{}},
			"resident.gql": &bintree{assetsSchemaResidentGql, map[string]*bintree{}},
			"root.gql": &bintree{assetsSchemaRootGql, map[string]*bintree{}},
			"unit.gql": &bintree{assetsSchemaUnitGql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

